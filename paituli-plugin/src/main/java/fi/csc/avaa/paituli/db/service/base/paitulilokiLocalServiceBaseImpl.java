package fi.csc.avaa.paituli.db.service.base;

import java.io.Serializable;
import java.util.List;

import javax.sql.DataSource;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import fi.csc.avaa.paituli.db.model.paituliloki;
import fi.csc.avaa.paituli.db.service.paitulilokiLocalService;
import fi.csc.avaa.paituli.db.service.persistence.paitulilokiPersistence;

/**
 * Provides the base implementation for the paituliloki local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link fi.csc.avaa.paituli.db.service.impl.paitulilokiLocalServiceImpl}.
 * </p>
 *
 * @author pj
 * @see fi.csc.avaa.paituli.db.service.impl.paitulilokiLocalServiceImpl
 * @see fi.csc.avaa.paituli.db.service.paitulilokiLocalServiceUtil
 * @generated
 */
public abstract class paitulilokiLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements paitulilokiLocalService,
        IdentifiableBean {
    @BeanReference(type = fi.csc.avaa.paituli.db.service.paitulilokiLocalService.class)
    protected fi.csc.avaa.paituli.db.service.paitulilokiLocalService paitulilokiLocalService;
    @BeanReference(type = paitulilokiPersistence.class)
    protected paitulilokiPersistence paitulilokiPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private paitulilokiLocalServiceClpInvoker _clpInvoker = new paitulilokiLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link fi.csc.avaa.paituli.db.service.paitulilokiLocalServiceUtil} to access the paituliloki local service.
     */

    /**
     * Adds the paituliloki to the database. Also notifies the appropriate model listeners.
     *
     * @param paituliloki the paituliloki
     * @return the paituliloki that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public paituliloki addpaituliloki(paituliloki paituliloki)
        throws SystemException {
        paituliloki.setNew(true);

        return paitulilokiPersistence.update(paituliloki);
    }

    /**
     * Creates a new paituliloki with the primary key. Does not add the paituliloki to the database.
     *
     * @param event_id the primary key for the new paituliloki
     * @return the new paituliloki
     */
    @Override
    public paituliloki createpaituliloki(int event_id) {
        return paitulilokiPersistence.create(event_id);
    }

    /**
     * Deletes the paituliloki with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param event_id the primary key of the paituliloki
     * @return the paituliloki that was removed
     * @throws PortalException if a paituliloki with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public paituliloki deletepaituliloki(int event_id)
        throws PortalException, SystemException {
        return paitulilokiPersistence.remove(event_id);
    }

    /**
     * Deletes the paituliloki from the database. Also notifies the appropriate model listeners.
     *
     * @param paituliloki the paituliloki
     * @return the paituliloki that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public paituliloki deletepaituliloki(paituliloki paituliloki)
        throws SystemException {
        return paitulilokiPersistence.remove(paituliloki);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(paituliloki.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return paitulilokiPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link fi.csc.avaa.paituli.db.model.impl.paitulilokiModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return paitulilokiPersistence.findWithDynamicQuery(dynamicQuery, start,
            end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link fi.csc.avaa.paituli.db.model.impl.paitulilokiModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return paitulilokiPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return paitulilokiPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return paitulilokiPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public paituliloki fetchpaituliloki(int event_id) throws SystemException {
        return paitulilokiPersistence.fetchByPrimaryKey(event_id);
    }

    /**
     * Returns the paituliloki with the primary key.
     *
     * @param event_id the primary key of the paituliloki
     * @return the paituliloki
     * @throws PortalException if a paituliloki with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public paituliloki getpaituliloki(int event_id)
        throws PortalException, SystemException {
        return paitulilokiPersistence.findByPrimaryKey(event_id);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return paitulilokiPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the paitulilokis.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link fi.csc.avaa.paituli.db.model.impl.paitulilokiModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of paitulilokis
     * @param end the upper bound of the range of paitulilokis (not inclusive)
     * @return the range of paitulilokis
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<paituliloki> getpaitulilokis(int start, int end)
        throws SystemException {
        return paitulilokiPersistence.findAll(start, end);
    }

    /**
     * Returns the number of paitulilokis.
     *
     * @return the number of paitulilokis
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getpaitulilokisCount() throws SystemException {
        return paitulilokiPersistence.countAll();
    }

    /**
     * Updates the paituliloki in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param paituliloki the paituliloki
     * @return the paituliloki that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public paituliloki updatepaituliloki(paituliloki paituliloki)
        throws SystemException {
        return paitulilokiPersistence.update(paituliloki);
    }

    /**
     * Returns the paituliloki local service.
     *
     * @return the paituliloki local service
     */
    public fi.csc.avaa.paituli.db.service.paitulilokiLocalService getpaitulilokiLocalService() {
        return paitulilokiLocalService;
    }

    /**
     * Sets the paituliloki local service.
     *
     * @param paitulilokiLocalService the paituliloki local service
     */
    public void setpaitulilokiLocalService(
        fi.csc.avaa.paituli.db.service.paitulilokiLocalService paitulilokiLocalService) {
        this.paitulilokiLocalService = paitulilokiLocalService;
    }

    /**
     * Returns the paituliloki persistence.
     *
     * @return the paituliloki persistence
     */
    public paitulilokiPersistence getpaitulilokiPersistence() {
        return paitulilokiPersistence;
    }

    /**
     * Sets the paituliloki persistence.
     *
     * @param paitulilokiPersistence the paituliloki persistence
     */
    public void setpaitulilokiPersistence(
        paitulilokiPersistence paitulilokiPersistence) {
        this.paitulilokiPersistence = paitulilokiPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("fi.csc.avaa.paituli.db.model.paituliloki",
            paitulilokiLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "fi.csc.avaa.paituli.db.model.paituliloki");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return paituliloki.class;
    }

    protected String getModelClassName() {
        return paituliloki.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = paitulilokiPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
